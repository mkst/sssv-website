{"version":3,"sources":["pages/Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["MainPage","useState","latestData","setLatestData","historicData","setHistoricData","progress","setProgress","progressChart","setProgressChart","useEffect","fetch","then","resp","json","res","map","version","className","sections","section","c_functions","total_functions","c","total","percent","data","dates","commits","commit","d","Date","date","push","toISOString","slice","name","colors","plotData","labels","datasets","idx","label","i","length","dataset","backgroundColor","options","scales","xAxes","type","yAxes","stacked","elements","line","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89b8ac6b.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { Line } from 'react-chartjs-2'\n\nimport './Main.scss'\n\n\n\nexport const MainPage = () => {\n\n  const [latestData, setLatestData] = useState(null)\n  const [historicData, setHistoricData] = useState(null)\n\n  const [progress, setProgress] = useState(null)\n  const [progressChart, setProgressChart] = useState(null)\n\n  useEffect(() => {\n    fetch('/latest.json')\n    .then(resp => resp.json())\n    .then(setLatestData)\n  }, [setLatestData])\n\n  useEffect(() => {\n    fetch('/commits.json')\n    .then(resp => resp.json())\n    .then(setHistoricData)\n  }, [setHistoricData])\n\n  useEffect(() => {\n    if (latestData === null)\n      return;\n\n    const res = latestData.progress.map(version => {\n      return (\n        <div className=\"progress\">\n          <div className=\"heading\">\n            <div className=\"cell left-align bold narrow\"></div>\n            <div className=\"cell bold\">functions</div>\n            <div className=\"cell bold\">bytes</div>\n            <div className=\"cell bold\">bytes %</div>\n          </div>\n        {\n          version.sections.map(section => {\n            return (\n              <div key={section.section} className=\"row\">\n                <div className=\"cell bold narrow\">\n                  {section.section}\n                </div>\n                <div className=\"cell\">\n                  {section.c_functions} / {section.total_functions}\n                </div>\n                <div className=\"cell\">\n                  {section.c} / {section.total}\n                </div>\n                <div className=\"cell\">\n                  {section.percent}%\n                </div>\n              </div>\n            )\n          })\n        }\n        </div>)\n    })\n    setProgress(res)\n  }, [setProgress, latestData])\n\n  const selectedVersion = \"us\"\n\n  useEffect(() => {\n\n    if (historicData === null)\n      return;\n\n    const data = {\n        \"lib\": [],\n        \"main\": [],\n        \"overlay1\": [],\n        \"overlay2\": [],\n        \"all\": []\n    }\n\n    const dates = []\n    historicData.commits.map(commit => {\n      const d = new Date(commit.date * 1000)\n      dates.push(d.toISOString().slice(0, 16))\n      commit.progress.map(version => {\n        if (version.version === selectedVersion) {\n          version.sections.map(section => {\n            const name = section.section\n            if (name === \"all\") {\n              data[name].push(section.total)\n            } else {\n              data[name].push(section.c)\n            }\n          })\n        }\n      })\n    })\n\n    const labels = [\"main\", \"lib\", \"overlay1\", \"overlay2\"]\n    const colors = ['rgba(199, 160, 221, 0.5)', 'rgba(221, 168, 160, 0.5)', 'rgba(182, 221, 160, 0.5)', 'rgba(160, 213, 221, 0.5)',]\n\n    const plotData = {\n        labels: dates,\n        datasets: []\n    }\n\n    var idx = 0\n    labels.map(label => {\n      const d = []\n      for (var i = 0; i < data[label].length; i++) {\n        d.push(data[label][i] / data[\"all\"][i] * 100)\n      }\n      const dataset = {\n        label: label,\n        data: d,\n        backgroundColor: colors[idx],\n      }\n      if (idx == 0) {\n        dataset[\"fill\"] = 'origin'\n      }\n      plotData.datasets.push(dataset)\n      idx++\n    })\n\n    const options = {\n      scales: {\n        xAxes: {\n            type: 'time',\n        },\n        yAxes: [\n          {\n            stacked: true\n          },\n        ],\n      },\n      elements: {\n          line: {\n              fill: '-1' // by default, fill lines to the previous dataset\n          }\n      },\n    }\n\n    setProgressChart(<div className=\"chart\">\n      <Line data={plotData} options={options} />\n    </div>)\n\n  }, [historicData, selectedVersion])\n\n  return <div className=\"container\">\n    <div className=\"title\">\n      Space Station Silicon Valley Decomp:\n    </div>\n    {progress}\n    {progressChart}\n  </div>\n}\n","import {MainPage} from './pages/Main'\n\nimport './App.css'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}